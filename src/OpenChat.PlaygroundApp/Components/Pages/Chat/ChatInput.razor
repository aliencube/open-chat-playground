@inject IJSRuntime JS

<EditForm Model="@this" OnValidSubmit="@SendMessageAsync">
    <label class="input-box page-width">
        <textarea aria-label="User Message Textarea" @ref="@textArea" @bind="@messageText" @bind:event="oninput" @onkeydown="HandleKeyDown" placeholder="Type your message..." rows="1"></textarea>

        <div class="tools">
            <button type="submit" title="Send" class="send-button" aria-label="User Message Send Button" disabled="@(string.IsNullOrWhiteSpace(messageText))">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="tool-icon">
                    <path stroke-linecap="round" stroke-linejoin="round" d="M6 12 3.269 3.125A59.769 59.769 0 0 1 21.485 12 59.768 59.768 0 0 1 3.27 20.875L5.999 12Zm0 0h7.5" />
                </svg>
            </button>
        </div>
    </label>
</EditForm>

@code {
    private ElementReference textArea;
    private string? messageText;
    private bool hasJustSent;

    [Parameter]
    public EventCallback<ChatMessage> OnSend { get; set; }

    public ValueTask FocusAsync()
        => textArea.FocusAsync();

    private async Task SendMessageAsync()
    {
        if (messageText is { Length: > 0 } rawText)
        {
            var trimmedText = rawText.Trim();
            if (trimmedText.Length == 0)
            {
                messageText = null;
                return;
            }

            hasJustSent = true;
            messageText = null;
            await OnSend.InvokeAsync(new ChatMessage(ChatRole.User, trimmedText));
        }
    }

    private Task HandleKeyDown(Microsoft.AspNetCore.Components.Web.KeyboardEventArgs e)
    {
        // Ignore while composing (IME) to avoid duplicate Enter keydown on macOS
        if (e.IsComposing)
        {
            return Task.CompletedTask;
        }

        // Ignore auto-repeat from holding the Enter key
        if (e.Repeat)
        {
            return Task.CompletedTask;
        }

        var isEnter = e.Key == "Enter" && !e.ShiftKey;
        if (!isEnter)
        {
            // Any non-Enter key press clears the justSent guard
            hasJustSent = false;
            return Task.CompletedTask;
        }

        // Ignore immediate Enter after a send until user types again
        if (hasJustSent)
        {
            return Task.CompletedTask;
        }

        // Don't submit on empty Enter
        var isEmpty = string.IsNullOrWhiteSpace(messageText);
        if (isEmpty)
        {
            return Task.CompletedTask;
        }

        return SendMessageAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Pages/Chat/ChatInput.razor.js");
                await module.InvokeVoidAsync("init", textArea);
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
}
