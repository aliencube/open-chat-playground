name: Azure Dev

on:
  workflow_dispatch:
  push:
    branches:
    - main
    paths-ignore:
    - '.github/**'

permissions:
  id-token: write
  contents: read

jobs:
  build-test-deploy:

    runs-on: ubuntu-latest

    env:
      AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: ${{ vars.AZURE_ENV_NAME }}
      AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}
      GH_MODELS_TOKEN: ${{ secrets.GH_MODELS_TOKEN }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.x

    - name: Install local certs
      shell: bash
      run: |
        dotnet dev-certs https --trust

    - name: Restore NuGet packages
      shell: bash
      run: |
        dotnet restore

    - name: Build solution
      shell: bash
      run: |
        dotnet build -c Release --no-restore --no-incremental

    - name: Run unit tests
      shell: bash
      run: |
        dotnet test . -c Release --no-build --logger "trx" --collect:"XPlat Code Coverage" --filter "Category=UnitTest"

    - name: Install playwright
      shell: pwsh
      run: |
        $playwright = Get-ChildItem -File Microsoft.Playwright.dll -Path . -Recurse
        $installer = "$($playwright[0].Directory.FullName)/playwright.ps1"
        & "$installer" install

    - name: Run app in background
      shell: bash
      run: |
        dotnet user-secrets --project ./src/OpenChat.PlaygroundApp \
            set GitHubModels:Token "temporary-dummy-token"

        dotnet run --project ./src/OpenChat.PlaygroundApp &

        sleep 30

    - name: Run integration tests - LLM not required
      shell: bash
      run: |
        dotnet test . -c Release --no-build --logger "trx" --collect:"XPlat Code Coverage" --filter "Category=IntegrationTest & Category!=LLMRequired"

    - name: Install azd
      uses: Azure/setup-azd@v2

    - name: Log in with Azure
      shell: pwsh
      run: |
        azd auth login `
          --client-id "$env:AZURE_CLIENT_ID" `
          --federated-credential-provider "github" `
          --tenant-id "$env:AZURE_TENANT_ID"

    - name: Provision Infrastructure
      shell: bash
      env:
        GitHubModels__Token: ${{ env.GH_MODELS_TOKEN }}
      run: |
        azd provision --no-prompt

    - name: Deploy Application
      shell: bash
      run: |
        azd deploy --no-prompt
