name: On Quest Submitted

on:
  issues:
    types:
      - opened
  workflow_dispatch:
    inputs:
      issue-number:
        description: "Issue number"
        required: true

permissions:
  contents: read
  id-token: write
  issues: write
  pull-requests: write

jobs:
  verification:
    name: "Verifying Quest Submission"

    runs-on: ubuntu-latest

    steps:
      - name: Check event payload - from issue
        if: |
          github.event_name != 'workflow_dispatch'
        shell: pwsh
        run: |
          $eventPayload = '${{ toJson(github) }}'
          $eventPayload | Out-File -FilePath ${{github.workspace}}/payload.json -Force

      - name: Check event payload - from workflow_dispatch
        if: |
          github.event_name == 'workflow_dispatch'
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $eventPayload = gh api /repos/${{ github.repository }}/issues/${{ github.event.inputs.issue-number }}
          $eventPayload | Out-File -FilePath ${{github.workspace}}/payload.json -Force
      
      - name: Check event payload
        shell: pwsh
        run: |
          $payload = Get-Content "${{ github.workspace }}/payload.json"
          $payload

      # - name: Install .NET SDK
      #   uses: actions/setup-dotnet@v4
      #   with:
      #     dotnet-version: '9.x'

      # - name: Checkout quest checker repository
      #   uses: actions/checkout@v4
      #   with:
      #     repository: aliencube/ossca-quest-checker
      #     path: quest-checker
      #     token: ${{ secrets.GH_PAT }}

      # - name: Verify issue - from issue
      #   if: |
      #     github.event_name != 'workflow_dispatch'
      #   shell: bash
      #   run: |
      #     pushd ./quest-checker

      #     dotnet run --project ./src/OssCaQuestChecker.IssueVerification.ConsoleApp -- \
      #       --input "${{ github.workspace }}/payload.json" \
      #       --output "${{ github.workspace }}/issue.json" \
      #       --due-date "${{ vars.DUE_DATE }}"
          
      #     popd

      # - name: Verify issue - from workflow_dispatch
      #   if: |
      #     github.event_name == 'workflow_dispatch'
      #   shell: bash
      #   run: |
      #     pushd ./quest-checker

      #     dotnet run --project ./src/OssCaQuestChecker.IssueVerification.ConsoleApp -- \
      #       --input "${{ github.workspace }}/payload.json" \
      #       --output "${{ github.workspace }}/issue.json" \
      #       --due-date "${{ vars.DUE_DATE }}" \
      #       --workflow-dispatch

      #     popd

      # - name: Check validation result
      #   id: issue
      #   shell: pwsh
      #   run: |
      #     $result = Get-Content "${{ github.workspace }}/issue.json" | ConvertFrom-Json

      #     $tzi = [TimeZoneInfo]::FindSystemTimeZoneById("Asia/Seoul")

      #     # Common
      #     echo "issueNumber=$($result.number)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
      #     echo "questType=$($result.questType)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
      #     echo "githubId=$($result.createdBy)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
      #     echo "submittedAt=$([TimeZoneInfo]::ConvertTime($result.createdAt, $tzi).ToString("yyyy-MM-dd HH:mm:ss.fff") + " +09:00")" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
      #     echo "dueBy=$([TimeZoneInfo]::ConvertTime($result.dueDate, $tzi).ToString("yyyy-MM-dd HH:mm:ss.fff") + " +09:00")" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

      #     # Verification result
      #     echo "isValid=$($result.isValid)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
      #     echo "invalidReasons=$('<ul><li> ' + $($result.invalidReasons -join '</li><li> ') + '</li></ul>')" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

      #     # Quest 1
      #     echo "englishName=$($result.englishName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
      #     echo "certId=$($result.certificationId)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

      #     # Quest 2 & 3
      #     echo "githubRepository=$($result.gitHubRepository)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

      #     # Quest 4
      #     echo "youtubeLink=$($result.youTubeLink)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

      # - name: Add a label - Acknowledge
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh issue edit ${{ steps.issue.outputs.issueNumber }} \
      #       --add-label "ossca,quest,${{ steps.issue.outputs.questType }}" \
      #       -R ${{ github.event.repository.full_name }}

      # - name: Comment to issue - Acknowledge
      #   uses: actions-cool/issues-helper@v3
      #   with:
      #     actions: "create-comment"
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     issue-number: ${{ steps.issue.outputs.issueNumber }}
      #     emoji: "+1,rocket"
      #     body: |
      #       👋🏼 @${{ steps.issue.outputs.githubId }} 님!

      #       과제를 제출해 주셔서 감사합니다! 🎉

      #       생성해주신 이슈는 현재 확인 중이며, 완료 여부를 확인한 후 다시 알려드리겠습니다.

      # - name: Add a label - Invalid
      #   if: |
      #     steps.issue.outputs.isValid == 'false'
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh issue edit ${{ steps.issue.outputs.issueNumber }} \
      #       --add-label "invalid" \
      #       -R ${{ github.event.repository.full_name }}

      # - name: Comment to issue - Invalid
      #   if: |
      #     steps.issue.outputs.isValid == 'false'
      #   uses: actions-cool/issues-helper@v3
      #   with:
      #     actions: "create-comment"
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     issue-number: ${{ steps.issue.outputs.issueNumber }}
      #     body: |
      #       👋🏼 @${{ steps.issue.outputs.githubId }} 님!

      #       앱을 제출해 주셔서 감사합니다! 🎉

      #       - 앱 제출 시각: ${{ steps.issue.outputs.submittedAt }}
      #       - 앱 제출 마감 시각: ${{ steps.issue.outputs.dueBy }}

      #       하지만 제출하신 앱은 다음과 같은 이유로 인해 유효하지 않습니다. 😢

      #       ${{ steps.issue.outputs.invalidReasons }}

      # - name: Close issue - Invalid
      #   if: |
      #     steps.issue.outputs.isValid == 'false'
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh issue close ${{ steps.issue.outputs.issueNumber }} \
      #       -c "제출한 앱이 유효하지 않습니다. 이슈를 닫습니다." \
      #       -R ${{ github.event.repository.full_name }}

      # - name: Verify certification - Quest 1
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.questType == 'csharp-certification'
      #   shell: bash
      #   run: |
      #     pushd ./quest-checker

      #     dotnet run --project ./src/OssCaQuestChecker.CharpCertification.ConsoleApp -- \
      #       --name "${{ steps.issue.outputs.englishName }}" \
      #       --cert-id "${{ steps.issue.outputs.certId }}"

      #     popd

      # - name: Checkout quest repository - Quest 2 & 3
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     (steps.issue.outputs.questType == 'connect-four' || steps.issue.outputs.questType == 'unit-test')
      #   uses: actions/checkout@v4
      #   with:
      #     repository: ${{ steps.issue.outputs.githubRepository }}
      #     path: quest
      #     token: ${{ secrets.GH_PAT }}

      # - name: Get project - Connect Four
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.questType == 'connect-four'
      #   id: connect-four
      #   shell: pwsh
      #   run: |
      #     $projects = Get-ChildItem -Path ./quest/*.csproj -Recurse
      #     $project = $projects[0]
      #     $launchSettings = Get-Content -Path "$($project.Directory.FullName)/Properties/launchSettings.json" | ConvertFrom-Json
      #     $appUrl = if ($launchSettings -ne $null) {
      #       $launchSettings.profiles.http.applicationUrl
      #     } else {
      #       "none"
      #     }

      #     echo "projectCount=$($projects.Count)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
      #     echo "project=$project" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
      #     echo "appUrl=$appUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

      # - name: Run project - Connect Four
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.questType == 'connect-four' &&
      #     steps.connect-four.outputs.projectCount == '1'
      #   shell: bash
      #   run: |
      #     pushd ./quest

      #     dotnet restore && dotnet build
      #     dotnet run --project "${{ steps.connect-four.outputs.project }}" &

      #     popd

      # - name: Check quest - Connect Four
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.questType == 'connect-four' &&
      #     steps.connect-four.outputs.projectCount == '1'
      #   id: check-quest-connect-four
      #   shell: pwsh
      #   run: |
      #     $errorCode = "${{ github.event.inputs.error-code }}"
      #     $forceError = if ($errorCode -eq '') { $false } else { $true }

      #     $issueType = "${{ steps.issue.outputs.issueType }}" -replace "DOTNET", "DOT-NET"

      #     pushd ./quest-checker

      #     dotnet restore && dotnet build

      #     $playwright = Get-ChildItem -File Microsoft.Playwright.dll -Path . -Recurse
      #     $installer = "$($playwright[0].Directory.FullName)/playwright.ps1"
      #     & "$installer" install

      #     if ($forceError -eq $true) {
      #       $result = dotnet run `
      #         --project ./src/OssCaQuestChecker.ConnectFour.ConsoleApp `
      #         -- `
      #         -t $issueType `
      #         -u ${{ steps.connect-four.outputs.appUrl }} `
      #         --force-error `
      #         --error-code $errorCode | ConvertFrom-Json
      #     } else {
      #       $result = dotnet run `
      #         --project ./src/OssCaQuestChecker.ConnectFour.ConsoleApp `
      #         -- `
      #         -t $issueType `
      #         -u ${{ steps.connect-four.outputs.appUrl }} | ConvertFrom-Json
      #     }

      #     echo "questType=$($result.questType)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
      #     echo "questStatus=$($result.questStatus)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
      #     echo "questMessage=$($result.message)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

      #     popd

      # - name: Add label - FAILED - Connect Four
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.questType == 'connect-four' &&
      #     steps.connect-four.outputs.projectCount == '1' &&
      #     steps.check-quest-connect-four.outputs.questStatus == 'FAILED'
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh issue edit ${{ steps.issue.outputs.issueNumber }} \
      #     --add-label "failed" \
      #     -R ${{ github.event.repository.full_name }}

      # - name: Comment to issue - FAILED - Connect Four
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.questType == 'connect-four' &&
      #     steps.connect-four.outputs.projectCount == '1' &&
      #     steps.check-quest-connect-four.outputs.questStatus == 'FAILED'
      #   uses: actions-cool/issues-helper@v3
      #   with:
      #     actions: "create-comment"
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     issue-number: ${{ steps.issue.outputs.issueNumber }}
      #     body: |
      #       👋🏼 @${{ steps.issue.outputs.githubId }} 님!

      #       과제를 확인하는 중에 문제가 발생했습니다❗

      #       최대한 빨리 확인한 후 다시 알려드리겠습니다.

      # - name: Add label - INVALID - Connect Four
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.questType == 'connect-four' &&
      #     steps.connect-four.outputs.projectCount == '1' &&
      #     steps.check-quest-connect-four.outputs.questStatus == 'INVALID'
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh issue edit ${{ steps.issue.outputs.issueNumber }} \
      #     --add-label "invalid" \
      #     -R ${{ github.event.repository.full_name }}

      # - name: Comment to issue - INVALID - Connect Four
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.questType == 'connect-four' &&
      #     steps.connect-four.outputs.projectCount == '1' &&
      #     steps.check-quest-connect-four.outputs.questStatus == 'INVALID'
      #   uses: actions-cool/issues-helper@v3
      #   with:
      #     actions: "create-comment"
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     issue-number: ${{ steps.issue.outputs.issueNumber }}
      #     body: |
      #       👋🏼 @${{ steps.issue.outputs.githubId }} 님!

      #       입력하신 값이 올바르지 않습니다. 😭

      #       다시 한 번 확인해 주세요❗

      # - name: Close issue - INVALID - Connect Four
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.questType == 'connect-four' &&
      #     steps.connect-four.outputs.projectCount == '1' &&
      #     steps.check-quest-connect-four.outputs.questStatus == 'INVALID'
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh issue close ${{ steps.issue.outputs.issueNumber }} \
      #       -c "입력 값이 올바르지 않습니다. 이슈를 닫습니다." \
      #       -R ${{ github.event.repository.full_name }}

      # - name: Add label - NOT_COMPLETED - Connect Four
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.questType == 'connect-four' &&
      #     steps.connect-four.outputs.projectCount == '1' &&
      #     steps.check-quest-connect-four.outputs.questStatus == 'NOT_COMPLETED'
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh issue edit ${{ steps.issue.outputs.issueNumber }} \
      #     --add-label "incomplete" \
      #     -R ${{ github.event.repository.full_name }}

      # - name: Comment to issue - NOT_COMPLETED - Connect Four
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.questType == 'connect-four' &&
      #     steps.connect-four.outputs.projectCount == '1' &&
      #     steps.check-quest-connect-four.outputs.questStatus == 'NOT_COMPLETED'
      #   uses: actions-cool/issues-helper@v3
      #   with:
      #     actions: "create-comment"
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     issue-number: ${{ steps.issue.outputs.issueNumber }}
      #     body: |
      #       👋🏼 @${{ steps.issue.outputs.githubId }} 님!

      #       확인 결과 과제를 아직 끝마치지 않으셨습니다. 😭

      #       과제를 완료 하신 후 이슈를 생성해주세요❗

      # - name: Close issue - NOT_COMPLETED - Connect Four
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.questType == 'connect-four' &&
      #     steps.connect-four.outputs.projectCount == '1' &&
      #     steps.check-quest-connect-four.outputs.questStatus == 'NOT_COMPLETED'
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh issue close ${{ steps.issue.outputs.issueNumber }} \
      #       -c "과제 완료 기록을 확인할 수 없습니다. 이슈를 닫습니다." \
      #       -R ${{ github.event.repository.full_name }}

      # - name: Add label - COMPLETED - Connect Four
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.questType == 'connect-four' &&
      #     steps.connect-four.outputs.projectCount == '1' &&
      #     steps.check-quest-connect-four.outputs.questStatus == 'COMPLETED'
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh issue edit ${{ github.event.issue.number }} \
      #     --add-label "complete" \
      #     -R ${{ github.event.repository.full_name }}

      # - name: Comment to issue - COMPLETED - Connect Four
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.questType == 'connect-four' &&
      #     steps.connect-four.outputs.projectCount == '1' &&
      #     steps.check-quest-connect-four.outputs.questStatus == 'COMPLETED'
      #   uses: actions-cool/issues-helper@v3
      #   with:
      #     actions: "create-comment"
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     issue-number: ${{ github.event.issue.number }}
      #     emoji: "+1,rocket"
      #     body: |
      #       👋🏼 @${{ github.event.issue.user.login }}님!

      #       과제를 완료하셨습니다!

      #       축하드려요. 🎉🎉🎉

      # - name: Close issue - COMPLETED - Connect Four
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.questType == 'connect-four' &&
      #     steps.connect-four.outputs.projectCount == '1' &&
      #     steps.check-quest-connect-four.outputs.questStatus == 'COMPLETED'
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh issue close ${{ github.event.issue.number }} \
      #       -c "과제를 완료했습니다. 이슈를 닫습니다." \
      #       -R ${{ github.event.repository.full_name }}

      # - name: Run project - Unit Test
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.issueType == 'unit-test'
      #   shell: bash
      #   run: |
      #     pushd ./quest

      #     dotnet restore
      #     dotnet build /p:LangVersion=latest
      #     dotnet test /p:LangVersion=latest --logger "trx;LogFileName=test-results.trx"

      #     popd

      # - name: Check quest - Unit Test
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.issueType == 'unit-test'
      #   id: check-quest-unit-test
      #   shell: pwsh
      #   run: |
      #     pushd ./quest

      #     $files = Get-ChildItem *.trx -Recurse | Select-Object -Property FullName

      #     popd

      #     pushd ./quest-checker

      #     $result = ./gha-scripts/Check-UnitTestResults.ps1 -FilePaths $files.FullName
      #     $questType = "UNIT_TEST"
      #     $questStatus = if ($result -eq $true) { "COMPLETED" } else { "NOT_COMPLETED" }
      #     $message = if ($result -eq $true) { "Test passed" } else { "Test NOT passed" }

      #     echo "questType=$questType" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
      #     echo "questStatus=$questStatus" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
      #     echo "questMessage=$message" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

      #     popd

      # - name: Add label - NOT_COMPLETED - Unit Test
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.issueType == 'unit-test' &&
      #     steps.check-quest-unit-test.outputs.questStatus == 'NOT_COMPLETED'
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh issue edit ${{ steps.issue.outputs.issueNumber }} \
      #     --add-label "incomplete" \
      #     -R ${{ github.event.repository.full_name }}

      # - name: Comment to issue - NOT_COMPLETED - Unit Test
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.issueType == 'unit-test' &&
      #     steps.check-quest-unit-test.outputs.questStatus == 'NOT_COMPLETED'
      #   uses: actions-cool/issues-helper@v3
      #   with:
      #     actions: "create-comment"
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     issue-number: ${{ steps.issue.outputs.issueNumber }}
      #     body: |
      #       👋🏼 @${{ steps.issue.outputs.githubId }} 님!

      #       확인 결과 과제를 아직 끝마치지 않으셨습니다. 😭

      #       과제를 완료 하신 후 이슈를 생성해주세요❗

      # - name: Close issue - NOT_COMPLETED - Unit Test
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.issueType == 'unit-test' &&
      #     steps.check-quest-unit-test.outputs.questStatus == 'NOT_COMPLETED'
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh issue close ${{ steps.issue.outputs.issueNumber }} \
      #       -c "과제 완료 기록을 확인할 수 없습니다. 이슈를 닫습니다." \
      #       -R ${{ github.event.repository.full_name }}

      # - name: Add label - COMPLETED - Unit Test
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.issueType == 'unit-test' &&
      #     steps.check-quest-unit-test.outputs.questStatus == 'COMPLETED'
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh issue edit ${{ github.event.issue.number }} \
      #     --add-label "complete" \
      #     -R ${{ github.event.repository.full_name }}

      # - name: Comment to issue - COMPLETED - Unit Test
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.issueType == 'unit-test' &&
      #     steps.check-quest-unit-test.outputs.questStatus == 'COMPLETED'
      #   uses: actions-cool/issues-helper@v3
      #   with:
      #     actions: "create-comment"
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     issue-number: ${{ github.event.issue.number }}
      #     emoji: "+1,rocket"
      #     body: |
      #       👋🏼 @${{ github.event.issue.user.login }}님!

      #       과제를 완료하셨습니다!

      #       축하드려요. 🎉🎉🎉

      # - name: Close issue - COMPLETED - Unit Test
      #   if: |
      #     steps.issue.outputs.isValid == 'true' &&
      #     steps.issue.outputs.issueType == 'unit-test' &&
      #     steps.check-quest-unit-test.outputs.questStatus == 'COMPLETED'
      #   shell: bash
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     gh issue close ${{ github.event.issue.number }} \
      #       -c "과제를 완료했습니다. 이슈를 닫습니다." \
      #       -R ${{ github.event.repository.full_name }}
