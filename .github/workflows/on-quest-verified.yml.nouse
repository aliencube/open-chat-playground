name: On Quest Verified

on:
  issue_comment:
    types:
      - created
  # workflow_dispatch:
  #   inputs:
  #     issue-number:
  #       description: "Issue number"
  #       required: true

permissions:
  contents: read
  id-token: write
  issues: write
  pull-requests: write

jobs:
  verification:
    name: "Verifying Quest Submission"

    runs-on: ubuntu-latest

    steps:
      - name: Check event payload - from issue
        if: |
          github.event_name != 'workflow_dispatch'
        shell: pwsh
        run: |
          $eventPayload = '${{ toJson(github) }}'
          $eventPayload | Out-File -FilePath ${{github.workspace}}/payload.json -Force

      - name: Check event payload - from workflow_dispatch
        if: |
          github.event_name == 'workflow_dispatch'
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $eventPayload = gh api /repos/${{ github.repository }}/issues/${{ github.event.inputs.issue-number }}
          $eventPayload | Out-File -FilePath ${{github.workspace}}/payload.json -Force
      
      - name: Verify event payload
        shell: pwsh
        run: |
          $payload = Get-Content "${{ github.workspace }}/payload.json"
          $payload
      
      - name: Get mentees
        shell: pwsh
        run: |
          $menteesPayload = '${{ secrets.MENTEES }}'
          $menteesPayload | Out-File -FilePath ${{github.workspace}}/mentees.json -Force
      
      - name: Verify mentees payload
        shell: pwsh
        run: |
          $payload = Get-Content "${{ github.workspace }}/mentees.json"
          $payload

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Checkout quest checker repository
        uses: actions/checkout@v4
        with:
          repository: aliencube/ossca-quest-checker
          path: quest-checker
          token: ${{ secrets.GH_PAT }}

      - name: Verify issue - from issue
        if: |
          github.event_name != 'workflow_dispatch'
        shell: bash
        run: |
          pushd ./quest-checker

          dotnet run --project ./src/OssCaQuestChecker.IssueVerification.ConsoleApp -- \
            --input "${{ github.workspace }}/payload.json" \
            --output "${{ github.workspace }}/issue.json" \
            --mentees "${{ github.workspace }}/mentees.json" \
            --due-date "${{ vars.DUE_DATE }}"
          
          popd

      - name: Verify issue - from workflow_dispatch
        if: |
          github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          pushd ./quest-checker

          dotnet run --project ./src/OssCaQuestChecker.IssueVerification.ConsoleApp -- \
            --input "${{ github.workspace }}/payload.json" \
            --output "${{ github.workspace }}/issue.json" \
            --mentees "${{ github.workspace }}/mentees.json" \
            --due-date "${{ vars.DUE_DATE }}" \
            --workflow-dispatch

          popd
      
      - name: Verify result payload
        shell: pwsh
        run: |
          $result = Get-Content "${{ github.workspace }}/issue.json" | ConvertFrom-Json
          $result

      - name: Check issue details
        id: issue
        shell: pwsh
        run: |
          $result = Get-Content "${{ github.workspace }}/issue.json" | ConvertFrom-Json

          $tzi = [TimeZoneInfo]::FindSystemTimeZoneById("Asia/Seoul")

          # Common
          echo "issueNumber=$($result.number)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "title=$($result.body.title)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "questType=$($result.body.questType)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "githubId=$($result.createdBy)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "submittedAt=$([TimeZoneInfo]::ConvertTime($result.createdAt, $tzi).ToString("yyyy-MM-dd HH:mm:ss.fff") + " +09:00")" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "dueBy=$([TimeZoneInfo]::ConvertTime($result.dueDate, $tzi).ToString("yyyy-MM-dd HH:mm:ss.fff") + " +09:00")" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

          # Verification result
          echo "isValid=$($result.isValid)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "invalidReasons=$('<ul><li> ' + $($result.invalidReasons -join '</li><li> ') + '</li></ul>')" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

          # Quest 1
          echo "englishName=$($result.body.englishName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "certId=$($result.body.certificationId)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

          # Quest 2
          echo "githubRepository=$($result.body.gitHubRepository)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

          # Quest 3
          echo "mslearnId=$($result.body.learnId)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

          # Quest 4
          echo "youtubeLink=$($result.body.youTubeLink)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

          $approved = ("${{ github.event.comment.user.login }}" -eq "${{ github.event.issue.assignee.login }}") ? "true" : "false"
          if ($approved -eq "true") {
            $approved = ("${{ github.event.comment.body }}".Trim() -eq "/approve") ? "true" : "false"
          }
          echo "approved=$approved" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

      # GenAI for Beginners for .NET Quest
      - name: Add label - NOT_COMPLETED - GenAI for Beginners for .NET
        if: |
          steps.issue.outputs.approved == 'false'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
            --add-label "incomplete" \
            -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - NOT_COMPLETED - GenAI for Beginners for .NET
        if: |
          steps.issue.outputs.approved == 'false'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          body: |
            👋🏼 @${{ steps.issue.outputs.githubId }} 님!

            확인 결과 과제를 아직 끝마치지 않으셨습니다. 😭

            과제를 완료 하신 후 이슈를 생성해주세요❗

      - name: Close issue - NOT_COMPLETED - GenAI for Beginners for .NET
        if: |
          steps.issue.outputs.approved == 'false'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "과제 완료 기록을 확인할 수 없습니다. 이슈를 닫습니다." \
            -R ${{ github.event.repository.full_name }}

      - name: Add label - COMPLETED - GenAI for Beginners for .NET
        if: |
          steps.issue.outputs.approved == 'true'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
            --add-label "complete" \
            -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - COMPLETED - GenAI for Beginners for .NET
        if: |
          steps.issue.outputs.approved == 'true'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          emoji: "+1,rocket"
          body: |
            👋🏼 @${{ steps.issue.outputs.githubId }}님!

            과제를 완료하셨습니다!

            축하드려요. 🎉🎉🎉

      - name: Close issue - COMPLETED - GenAI for Beginners for .NET
        if: |
          steps.issue.outputs.approved == 'true'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "과제를 완료했습니다. 이슈를 닫습니다." \
            -R ${{ github.event.repository.full_name }}

      - name: Post to Discord - COMPLETED - GenAI for Beginners for .NET
        if: |
          steps.issue.outputs.approved == 'true'
        shell: pwsh
        run: |
          $mentees = Get-Content "${{ github.workspace }}/mentees.json" | ConvertFrom-Json
          $mentee = $mentees | Where-Object { $_.github_username -eq "${{ steps.issue.outputs.githubId }}" }
          $webhookUrl = "${{ secrets.DISCORD_WEBHOOK_URL }}"
          $body = @{
            content = "👋🏼 <@$($mentee.discord_userid)> 님, ${{ steps.issue.outputs.title }} 과제를 성공적으로 제출하셨습니다! 🎉"
          } | ConvertTo-Json
          
          Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $body -ContentType "application/json"
      # GenAI for Beginners for .NET Quest
