name: Azure Dev - Build Only

on:
  push:
    branches:
    - 'feat/*'
    - 'feature/*'
    - 'hotfix/*'
    paths-ignore:
    - '.github/**'
  pull_request:
    branches:
    - main

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

jobs:
  build-test:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.x

    - name: Setup Ollama
      uses: ai-action/setup-ollama@v1

    - uses: actions/cache@v4
      with:
        path: ~/.ollama
        key: ${{ runner.os }}-ollama

    - name: Install local certs
      shell: bash
      run: |
        dotnet dev-certs https --trust

    - name: Restore NuGet packages
      shell: bash
      run: |
        dotnet restore

    - name: Build solution
      shell: bash
      run: |
        dotnet build . --no-restore --no-incremental

    - name: Run unit tests
      shell: bash
      run: |
        dotnet test . --no-build --logger "trx" --collect:"XPlat Code Coverage" --filter "Category=UnitTest"

    - name: Install playwright
      shell: pwsh
      run: |
        $playwright = Get-ChildItem -File Microsoft.Playwright.dll -Path . -Recurse
        $installer = "$($playwright[0].Directory.FullName)/playwright.ps1"
        & "$installer" install

    - name: Run Ollama server
      shell: bash
      run: |
        ollama serve &
        
        # Wait for Ollama server to be ready
        timeout=30
        while ! curl -s http://localhost:11434/api/tags > /dev/null; do
          sleep 1
          timeout=$((timeout - 1))
          if [ $timeout -le 0 ]; then
            echo "Timeout waiting for Ollama server"
            exit 1
          fi
        done
        
        echo "Ollama server is ready"
        ollama pull hf.co/Qwen/Qwen3-0.6B-GGUF
        ollama pull hf.co/LGAI-EXAONE/EXAONE-4.0-1.2B-GGUF

    - name: Run app in background
      shell: bash
      run: |
        dotnet user-secrets --project ./src/OpenChat.PlaygroundApp \
            set GitHubModels:Token "temporary-dummy-token"

        dotnet run --project ./src/OpenChat.PlaygroundApp --no-launch-profile --urls "http://localhost:5280" -- --connector-type HuggingFace &

        # Wait for app to be ready
        timeout=60
        while ! curl -s http://localhost:5280 > /dev/null; do
          sleep 1
          timeout=$((timeout - 1))
          if [ $timeout -le 0 ]; then
            echo "Timeout waiting for app to start"
            exit 1
          fi
        done
        
        echo "App is ready"

    - name: Run integration tests
      shell: bash
      run: |
        dotnet test ./test/OpenChat.PlaygroundApp.Tests --no-build --logger "trx" --collect:"XPlat Code Coverage" --filter "Category=IntegrationTest"
