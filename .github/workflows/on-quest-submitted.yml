name: On Quest Submitted

on:
  issues:
    types:
      - opened
  workflow_dispatch:
    inputs:
      issue-number:
        description: "Issue number"
        required: true

permissions:
  contents: read
  id-token: write
  issues: write
  pull-requests: write

jobs:
  verification:
    name: "Verifying Quest Submission"

    runs-on: ubuntu-latest

    steps:
      - name: Check event payload - from issue
        if: |
          github.event_name != 'workflow_dispatch'
        shell: pwsh
        run: |
          $eventPayload = '${{ toJson(github) }}'
          $eventPayload | Out-File -FilePath ${{github.workspace}}/payload.json -Force

      - name: Check event payload - from workflow_dispatch
        if: |
          github.event_name == 'workflow_dispatch'
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $eventPayload = gh api /repos/${{ github.repository }}/issues/${{ github.event.inputs.issue-number }}
          $eventPayload | Out-File -FilePath ${{github.workspace}}/payload.json -Force
      
      - name: Verify event payload
        shell: pwsh
        run: |
          $payload = Get-Content "${{ github.workspace }}/payload.json"
          $payload
      
      - name: Get mentees
        shell: pwsh
        run: |
          $menteesPayload = '${{ secrets.MENTEES }}'
          $menteesPayload | Out-File -FilePath ${{github.workspace}}/mentees.json -Force
      
      - name: Verify mentees payload
        shell: pwsh
        run: |
          $payload = Get-Content "${{ github.workspace }}/mentees.json"
          $payload

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Checkout quest checker repository
        uses: actions/checkout@v4
        with:
          repository: aliencube/ossca-quest-checker
          path: quest-checker
          token: ${{ secrets.GH_PAT }}

      - name: Verify issue - from issue
        if: |
          github.event_name != 'workflow_dispatch'
        shell: bash
        run: |
          pushd ./quest-checker

          dotnet run --project ./src/OssCaQuestChecker.IssueVerification.ConsoleApp -- \
            --input "${{ github.workspace }}/payload.json" \
            --output "${{ github.workspace }}/issue.json" \
            --mentees "${{ github.workspace }}/mentees.json" \
            --due-date "${{ vars.DUE_DATE }}"
          
          popd

      - name: Verify issue - from workflow_dispatch
        if: |
          github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          pushd ./quest-checker

          dotnet run --project ./src/OssCaQuestChecker.IssueVerification.ConsoleApp -- \
            --input "${{ github.workspace }}/payload.json" \
            --output "${{ github.workspace }}/issue.json" \
            --mentees "${{ github.workspace }}/mentees.json" \
            --due-date "${{ vars.DUE_DATE }}" \
            --workflow-dispatch

          popd
      
      - name: Verify result payload
        shell: pwsh
        run: |
          $result = Get-Content "${{ github.workspace }}/issue.json" | ConvertFrom-Json
          $result

      - name: Check validation result
        id: issue
        shell: pwsh
        run: |
          $result = Get-Content "${{ github.workspace }}/issue.json" | ConvertFrom-Json

          $tzi = [TimeZoneInfo]::FindSystemTimeZoneById("Asia/Seoul")

          # Common
          echo "issueNumber=$($result.number)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "title=$($result.body.title)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "questType=$($result.body.questType)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "githubId=$($result.createdBy)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "submittedAt=$([TimeZoneInfo]::ConvertTime($result.createdAt, $tzi).ToString("yyyy-MM-dd HH:mm:ss.fff") + " +09:00")" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "dueBy=$([TimeZoneInfo]::ConvertTime($result.dueDate, $tzi).ToString("yyyy-MM-dd HH:mm:ss.fff") + " +09:00")" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

          # Verification result
          echo "isValid=$($result.isValid)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "invalidReasons=$('<ul><li> ' + $($result.invalidReasons -join '</li><li> ') + '</li></ul>')" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

          # Quest 1
          echo "englishName=$($result.body.englishName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "certId=$($result.body.certificationId)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

          # Quest 2
          echo "githubRepository=$($result.body.gitHubRepository)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

          # Quest 3
          echo "mslearnId=$($result.body.learnId)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

          # Quest 4
          echo "youtubeLink=$($result.body.youTubeLink)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

      - name: Add a label - Acknowledge
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
            --add-label "ossca,quest,${{ steps.issue.outputs.questType }}" \
            -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - Acknowledge
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          emoji: "+1,rocket"
          body: |
            👋🏼 @${{ steps.issue.outputs.githubId }} 님!

            과제를 제출해 주셔서 감사합니다! 🎉

            생성해주신 이슈는 현재 확인 중이며, 완료 여부를 확인한 후 다시 알려드리겠습니다.

      - name: Add a label - Invalid
        if: |
          steps.issue.outputs.isValid == 'false'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
            --add-label "invalid" \
            -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - Invalid
        if: |
          steps.issue.outputs.isValid == 'false'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          body: |
            👋🏼 @${{ steps.issue.outputs.githubId }} 님!

            앱을 제출해 주셔서 감사합니다! 🎉

            - 앱 제출 시각: ${{ steps.issue.outputs.submittedAt }}
            - 앱 제출 마감 시각: ${{ steps.issue.outputs.dueBy }}

            하지만 제출하신 앱은 다음과 같은 이유로 인해 유효하지 않습니다. 😢

            ${{ steps.issue.outputs.invalidReasons }}

      - name: Close issue - Invalid
        if: |
          steps.issue.outputs.isValid == 'false'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "제출한 앱이 유효하지 않습니다. 이슈를 닫습니다." \
            -R ${{ github.event.repository.full_name }}

      # C# Certification Quest
      - name: Verify quest - C# Certification
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'csharp-certification'
        id: check-quest-csharp-certification
        shell: pwsh
        run: |
          pushd ./quest-checker

          dotnet restore && dotnet build

          $playwright = Get-ChildItem -File Microsoft.Playwright.dll -Path . -Recurse
          $installer = "$($playwright[0].Directory.FullName)/playwright.ps1"
          & "$installer" install

          $result = dotnet run `
            --project ./src/OssCaQuestChecker.CSharpCertification.ConsoleApp `
            -- `
            -t "${{ steps.issue.outputs.questType }}" `
            -n "${{ steps.issue.outputs.englishName }}" `
            -c "${{ steps.issue.outputs.certId }}" | ConvertFrom-Json

          echo "questType=$($result.questType)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "questStatus=$($result.questStatus)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "questMessage=$($result.message)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

          popd

      - name: Add label - FAILED - C# Certification
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'csharp-certification' &&
          steps.check-quest-csharp-certification.outputs.questStatus == 'failed'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
          --add-label "failed" \
          -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - FAILED - C# Certification
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'csharp-certification' &&
          steps.check-quest-csharp-certification.outputs.questStatus == 'failed'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          body: |
            👋🏼 @${{ steps.issue.outputs.githubId }} 님!

            과제를 확인하는 중에 문제가 발생했습니다❗

            최대한 빨리 확인한 후 다시 알려드리겠습니다.

      - name: Add label - INVALID - C# Certification
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'csharp-certification' &&
          steps.check-quest-csharp-certification.outputs.questStatus == 'invalid'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
          --add-label "invalid" \
          -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - INVALID - C# Certification
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'csharp-certification' &&
          steps.check-quest-csharp-certification.outputs.questStatus == 'invalid'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          body: |
            👋🏼 @${{ steps.issue.outputs.githubId }} 님!

            입력하신 값이 올바르지 않습니다. 😭

            다시 한 번 확인해 주세요❗

      - name: Close issue - INVALID - C# Certification
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'csharp-certification' &&
          steps.check-quest-csharp-certification.outputs.questStatus == 'invalid'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "입력 값이 올바르지 않습니다. 이슈를 닫습니다." \
            -R ${{ github.event.repository.full_name }}

      - name: Add label - NOT_COMPLETED - C# Certification
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'csharp-certification' &&
          steps.check-quest-csharp-certification.outputs.questStatus == 'not-completed'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
          --add-label "incomplete" \
          -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - NOT_COMPLETED - C# Certification
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'csharp-certification' &&
          steps.check-quest-csharp-certification.outputs.questStatus == 'not-completed'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          body: |
            👋🏼 @${{ steps.issue.outputs.githubId }} 님!

            확인 결과 과제를 아직 끝마치지 않으셨습니다. 😭

            과제를 완료 하신 후 이슈를 생성해주세요❗

      - name: Close issue - NOT_COMPLETED - C# Certification
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'csharp-certification' &&
          steps.check-quest-csharp-certification.outputs.questStatus == 'not-completed'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "과제 완료 기록을 확인할 수 없습니다. 이슈를 닫습니다." \
            -R ${{ github.event.repository.full_name }}

      - name: Add label - COMPLETED - C# Certification
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'csharp-certification' &&
          steps.check-quest-csharp-certification.outputs.questStatus == 'completed'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
          --add-label "complete" \
          -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - COMPLETED - C# Certification
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'csharp-certification' &&
          steps.check-quest-csharp-certification.outputs.questStatus == 'completed'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          emoji: "+1,rocket"
          body: |
            👋🏼 @${{ steps.issue.outputs.githubId }}님!

            과제를 완료하셨습니다!

            축하드려요. 🎉🎉🎉

      - name: Close issue - COMPLETED - C# Certification
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'csharp-certification' &&
          steps.check-quest-csharp-certification.outputs.questStatus == 'completed'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "과제를 완료했습니다. 이슈를 닫습니다." \
            -R ${{ github.event.repository.full_name }}
      
      - name: Post to Discord - COMPLETED - C# Certification
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'csharp-certification' &&
          steps.check-quest-csharp-certification.outputs.questStatus == 'completed'
        shell: pwsh
        run: |
          $mentees = Get-Content "${{ github.workspace }}/mentees.json" | ConvertFrom-Json
          $mentee = $mentees | Where-Object { $_.github_username -eq "${{ steps.issue.outputs.githubId }}" }
          $webhookUrl = "${{ secrets.DISCORD_WEBHOOK_URL }}"
          $body = @{
            content = "👋🏼 <@$($mentee.discord_userid)> 님, ${{ steps.issue.outputs.title }} 과제를 성공적으로 제출하셨습니다! 🎉"
          } | ConvertTo-Json
          
          Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $body -ContentType "application/json"
      # C# Certification Quest

      # Connect Four Quest
      - name: Checkout quest repository - Connect Four
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'connect-four'
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.issue.outputs.githubRepository }}
          path: quest
          token: ${{ secrets.GH_PAT }}

      - name: Get project - Connect Four
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'connect-four'
        id: connect-four
        shell: pwsh
        run: |
          $projects = Get-ChildItem -Path ./quest/*.csproj -Recurse
          $project = $projects[0]
          $launchSettings = Get-Content -Path "$($project.Directory.FullName)/Properties/launchSettings.json" | ConvertFrom-Json
          $appUrl = if ($launchSettings -ne $null) {
            $launchSettings.profiles.http.applicationUrl
          } else {
            "none"
          }

          $isValidTargetFramework = ./quest-checker/gha-scripts/Check-TargetFramework.ps1 -CsprojPath $project.FullName -ExpectedTargetFramework "net9.0"

          echo "isValidTargetFramework=$($isValidTargetFramework)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "projectCount=$($projects.Count)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "project=$project" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "appUrl=$appUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

      - name: Run project - Connect Four
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'connect-four' &&
          steps.connect-four.outputs.projectCount == '1'
        shell: bash
        run: |
          pushd ./quest

          dotnet restore && dotnet build
          dotnet run --project "${{ steps.connect-four.outputs.project }}" &

          popd

      - name: Verify quest - Connect Four
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'connect-four' &&
          steps.connect-four.outputs.projectCount == '1'
        id: check-quest-connect-four
        shell: pwsh
        run: |
          pushd ./quest-checker

          dotnet restore && dotnet build

          $playwright = Get-ChildItem -File Microsoft.Playwright.dll -Path . -Recurse
          $installer = "$($playwright[0].Directory.FullName)/playwright.ps1"
          & "$installer" install

          $result = dotnet run `
            --project ./src/OssCaQuestChecker.ConnectFour.ConsoleApp `
            -- `
            -t ${{ steps.issue.outputs.questType }} `
            -u ${{ steps.connect-four.outputs.appUrl }} | ConvertFrom-Json

          echo "questType=$($result.questType)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "questStatus=$($result.questStatus)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "questMessage=$($result.message)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

          popd

      - name: Add label - INVALID - Connect Four
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'connect-four' &&
          steps.connect-four.outputs.projectCount == '1' &&
          (steps.check-quest-connect-four.outputs.questStatus == 'invalid' || steps.connect-four.outputs.isValidTargetFramework == 'false')
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
          --add-label "invalid" \
          -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - INVALID - Connect Four
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'connect-four' &&
          steps.connect-four.outputs.projectCount == '1' &&
          (steps.check-quest-connect-four.outputs.questStatus == 'invalid' || steps.connect-four.outputs.isValidTargetFramework == 'false')
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          body: |
            👋🏼 @${{ steps.issue.outputs.githubId }} 님!

            입력하신 값이 올바르지 않습니다. 😭

            다시 한 번 확인해 주세요❗

      - name: Close issue - INVALID - Connect Four
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'connect-four' &&
          steps.connect-four.outputs.projectCount == '1' &&
          (steps.check-quest-connect-four.outputs.questStatus == 'invalid' || steps.connect-four.outputs.isValidTargetFramework == 'false')
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "입력 값이 올바르지 않습니다. 이슈를 닫습니다." \
            -R ${{ github.event.repository.full_name }}

      - name: Add label - FAILED - Connect Four
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'connect-four' &&
          steps.connect-four.outputs.projectCount == '1' &&
          steps.check-quest-connect-four.outputs.questStatus == 'failed'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
          --add-label "failed" \
          -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - FAILED - Connect Four
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'connect-four' &&
          steps.connect-four.outputs.projectCount == '1' &&
          steps.check-quest-connect-four.outputs.questStatus == 'failed'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          body: |
            👋🏼 @${{ steps.issue.outputs.githubId }} 님!

            과제를 확인하는 중에 문제가 발생했습니다❗

            최대한 빨리 확인한 후 다시 알려드리겠습니다.

      - name: Add label - NOT_COMPLETED - Connect Four
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'connect-four' &&
          steps.connect-four.outputs.projectCount == '1' &&
          steps.check-quest-connect-four.outputs.questStatus == 'not-completed'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
          --add-label "incomplete" \
          -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - NOT_COMPLETED - Connect Four
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'connect-four' &&
          steps.connect-four.outputs.projectCount == '1' &&
          steps.check-quest-connect-four.outputs.questStatus == 'not-completed'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          body: |
            👋🏼 @${{ steps.issue.outputs.githubId }} 님!

            확인 결과 과제를 아직 끝마치지 않으셨습니다. 😭

            과제를 완료 하신 후 이슈를 생성해주세요❗

      - name: Close issue - NOT_COMPLETED - Connect Four
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'connect-four' &&
          steps.connect-four.outputs.projectCount == '1' &&
          steps.check-quest-connect-four.outputs.questStatus == 'not-completed'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "과제 완료 기록을 확인할 수 없습니다. 이슈를 닫습니다." \
            -R ${{ github.event.repository.full_name }}

      - name: Add label - COMPLETED - Connect Four
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'connect-four' &&
          steps.connect-four.outputs.projectCount == '1' &&
          steps.check-quest-connect-four.outputs.questStatus == 'completed'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
          --add-label "complete" \
          -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - COMPLETED - Connect Four
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'connect-four' &&
          steps.connect-four.outputs.projectCount == '1' &&
          steps.check-quest-connect-four.outputs.questStatus == 'completed'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          emoji: "+1,rocket"
          body: |
            👋🏼 @${{ steps.issue.outputs.githubId }}님!

            과제를 완료하셨습니다!

            축하드려요. 🎉🎉🎉

      - name: Close issue - COMPLETED - Connect Four
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'connect-four' &&
          steps.connect-four.outputs.projectCount == '1' &&
          steps.check-quest-connect-four.outputs.questStatus == 'completed'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "과제를 완료했습니다. 이슈를 닫습니다." \
            -R ${{ github.event.repository.full_name }}
      
      - name: Post to Discord - COMPLETED - Connect Four
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'connect-four' &&
          steps.connect-four.outputs.projectCount == '1' &&
          steps.check-quest-connect-four.outputs.questStatus == 'completed'
        shell: pwsh
        run: |
          $mentees = Get-Content "${{ github.workspace }}/mentees.json" | ConvertFrom-Json
          $mentee = $mentees | Where-Object { $_.github_username -eq "${{ steps.issue.outputs.githubId }}" }
          $webhookUrl = "${{ secrets.DISCORD_WEBHOOK_URL }}"
          $body = @{
            content = "👋🏼 <@$($mentee.discord_userid)> 님, ${{ steps.issue.outputs.title }} 과제를 성공적으로 제출하셨습니다! 🎉"
          } | ConvertTo-Json
          
          Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $body -ContentType "application/json"
      # Connect Four Quest

      # Unit Test Quest
      - name: Verify quest - Unit Test
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'unit-test'
        id: check-quest-unit-test
        shell: pwsh
        run: |
          pushd ./quest-checker

          dotnet restore && dotnet build

          $playwright = Get-ChildItem -File Microsoft.Playwright.dll -Path . -Recurse
          $installer = "$($playwright[0].Directory.FullName)/playwright.ps1"
          & "$installer" install

          $result = dotnet run `
            --project ./src/OssCaQuestChecker.MsLearn.ConsoleApp `
            -- `
            -t "${{ steps.issue.outputs.questType }}" `
            -l "${{ steps.issue.outputs.mslearnId }}" | ConvertFrom-Json

          echo "questType=$($result.questType)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "questStatus=$($result.questStatus)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "questMessage=$($result.message)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

          popd

      - name: Add label - NOT_COMPLETED - Unit Test
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'unit-test' &&
          steps.check-quest-unit-test.outputs.questStatus == 'not-completed'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
          --add-label "incomplete" \
          -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - NOT_COMPLETED - Unit Test
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'unit-test' &&
          steps.check-quest-unit-test.outputs.questStatus == 'not-completed'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          body: |
            👋🏼 @${{ steps.issue.outputs.githubId }} 님!

            확인 결과 과제를 아직 끝마치지 않으셨습니다. 😭

            과제를 완료 하신 후 이슈를 생성해주세요❗

      - name: Close issue - NOT_COMPLETED - Unit Test
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'unit-test' &&
          steps.check-quest-unit-test.outputs.questStatus == 'not-completed'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "과제 완료 기록을 확인할 수 없습니다. 이슈를 닫습니다." \
            -R ${{ github.event.repository.full_name }}

      - name: Add label - COMPLETED - Unit Test
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'unit-test' &&
          steps.check-quest-unit-test.outputs.questStatus == 'completed'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
          --add-label "complete" \
          -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - COMPLETED - Unit Test
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'unit-test' &&
          steps.check-quest-unit-test.outputs.questStatus == 'completed'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          emoji: "+1,rocket"
          body: |
            👋🏼 @${{ steps.issue.outputs.githubId }}님!

            과제를 완료하셨습니다!

            축하드려요. 🎉🎉🎉

      - name: Close issue - COMPLETED - Unit Test
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'unit-test' &&
          steps.check-quest-unit-test.outputs.questStatus == 'completed'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "과제를 완료했습니다. 이슈를 닫습니다." \
            -R ${{ github.event.repository.full_name }}
      
      - name: Post to Discord - COMPLETED - Unit Test
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'unit-test' &&
          steps.check-quest-unit-test.outputs.questStatus == 'completed'
        shell: pwsh
        run: |
          $mentees = Get-Content "${{ github.workspace }}/mentees.json" | ConvertFrom-Json
          $mentee = $mentees | Where-Object { $_.github_username -eq "${{ steps.issue.outputs.githubId }}" }
          $webhookUrl = "${{ secrets.DISCORD_WEBHOOK_URL }}"
          $body = @{
            content = "👋🏼 <@$($mentee.discord_userid)> 님, ${{ steps.issue.outputs.title }} 과제를 성공적으로 제출하셨습니다! 🎉"
          } | ConvertTo-Json
          
          Invoke-RestMethod -Uri $webhookUrl -Method Post -Body $body -ContentType "application/json"
      # Unit Test Quest

      # GenAI for Beginners for .NET Quest
      - name: Assign issue - GenAI for Beginners for .NET
        if: |
          steps.issue.outputs.isValid == 'true' &&
          steps.issue.outputs.questType == 'genai-for-beginners'
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $assignees = ${{ vars.ASSIGNEES }} -split ","
          $random = Get-Random -Minimum 0 -Maximum $assignees.Count
          $assignee = $assignees[$random]

          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
            --add-assignee $assignee \
            -R ${{ github.event.repository.full_name }}
      # GenAI for Beginners for .NET Quest
